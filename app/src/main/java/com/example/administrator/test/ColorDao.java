package com.example.administrator.test;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.test.entity.Color;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLOR".
*/
public class ColorDao extends AbstractDao<Color, Long> {

    public static final String TABLENAME = "COLOR";

    /**
     * Properties of entity Color.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ColorNum = new Property(1, int.class, "colorNum", false, "COLOR_NUM");
        public final static Property Red = new Property(2, int.class, "red", false, "RED");
        public final static Property Green = new Property(3, int.class, "green", false, "GREEN");
        public final static Property Blue = new Property(4, int.class, "blue", false, "BLUE");
    }


    public ColorDao(DaoConfig config) {
        super(config);
    }
    
    public ColorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"COLOR_NUM\" INTEGER NOT NULL ," + // 1: colorNum
                "\"RED\" INTEGER NOT NULL ," + // 2: red
                "\"GREEN\" INTEGER NOT NULL ," + // 3: green
                "\"BLUE\" INTEGER NOT NULL );"); // 4: blue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Color entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getColorNum());
        stmt.bindLong(3, entity.getRed());
        stmt.bindLong(4, entity.getGreen());
        stmt.bindLong(5, entity.getBlue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Color entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getColorNum());
        stmt.bindLong(3, entity.getRed());
        stmt.bindLong(4, entity.getGreen());
        stmt.bindLong(5, entity.getBlue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Color readEntity(Cursor cursor, int offset) {
        Color entity = new Color( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // colorNum
            cursor.getInt(offset + 2), // red
            cursor.getInt(offset + 3), // green
            cursor.getInt(offset + 4) // blue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Color entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setColorNum(cursor.getInt(offset + 1));
        entity.setRed(cursor.getInt(offset + 2));
        entity.setGreen(cursor.getInt(offset + 3));
        entity.setBlue(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Color entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Color entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Color entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
